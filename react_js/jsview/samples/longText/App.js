/*
 * 【界面概述】
 * 协议书的示例
 *
 * 【控件介绍】
 * SimpleWidget：见simpleMetrowidget
 *
 * 【技巧说明】
 * Q: 如何长文字div的高度自适应？
 * A: 描画长文字的div的高度不设置即可
 *    并通过element.clientHeight获取渲染后的自动高度，以决定滚动轴的总高度
 *
 * Q: 长段文字如何换行？
 * A: 若文字内容中需要折行，则需要把要显示内容放入字符串中，并加入'\n'来达到换行效果，例如：
 *          <div>{"第一行
 *          第二行"}</div>
 *          =======需要改成=======
 *          <div>{"第一行\n\
 *          第二行"}</div>
 *
 * Q: 文字首行缩进如何做？
 * A: 目前系统只支持通过空格进行首行缩进，行首加入期望的空格数量即可达到缩进，因为盒子字体库和PC不尽相同，
 *    所以务必在盒子上实际测试缩进效果。
 *
 */

import React from 'react';
import createStandaloneApp from "../../utils/JsViewReactTools/StandaloneApp";
import { FocusBlock } from "../../utils/JsViewReactTools/BlockDefine";
import LongTextScroll from './LongTextScroll';
import { SimpleWidget, HORIZONTAL, EdgeDirection } from "../../utils/JsViewEngineWidget/index_widget";

const CONST_ITEM_WIDTH = 90;
const CONST_ITEM_HEIGHT = 50;
const BUTTON_DATA = [
  {
    name: '同意'
  },
  {
    name: '取消'
  }
];
class Button extends FocusBlock {
  constructor(prop) {
    super(prop);
    this._Measures = this._Measures.bind(this);
    this._RenderItem = this._RenderItem.bind(this);
    this._RenderFocus = this._RenderFocus.bind(this);
    this._OnWidgetMount = this._OnWidgetMount.bind(this);
    this._OnClick = this._OnClick.bind(this);
  }

  _Measures(item) {
    return SimpleWidget.getMeasureObj(CONST_ITEM_WIDTH, CONST_ITEM_HEIGHT, true, false);
  }

  _RenderFocus(item) {
    return (
            <div>
                <div style={{ backgroundColor: "#DD0000", top: -5, left: -5, width: CONST_ITEM_WIDTH, height: CONST_ITEM_HEIGHT }}></div>
                <div style={{ backgroundColor: '#EEEEEE', width: CONST_ITEM_WIDTH - 10, height: CONST_ITEM_HEIGHT - 10, color: "#000000", textAlign: "center", fontSize: 30 }}>
                    { item.name }
                </div>
            </div>
    );
  }

  _RenderItem(item) {
    return (
            <div style={{ backgroundColor: '#EEEEEE', width: CONST_ITEM_WIDTH - 10, height: CONST_ITEM_HEIGHT - 10, color: "#000000", textAlign: "center", fontSize: 30 }}>
                { item.name }
            </div>
    );
  }

  _OnClick(item) {
    console.log(`click ${item.name}`);
  }

  onFocus() {
    this.changeFocus(`${this.props.branchName}/widget`);
  }

  _OnWidgetMount() {

  }

  renderContent() {
    return (
            <SimpleWidget
                width={ 200 }
                height={ 70 }
                direction={ HORIZONTAL }
                data={ BUTTON_DATA }
                renderItem={ this._RenderItem }
                renderFocus={ this._RenderFocus }
                onClick={ this._OnClick }
                measures={ this._Measures }
                padding={{ top: 10, left: 10 }}
                branchName={ `${this.props.branchName}/widget` }
                onEdge={this.props.onEdge}
                onWidgetMount={ this._OnWidgetMount }
            />
    );
  }
}

class MainScene extends FocusBlock {
  constructor(props) {
    super(props);
    this._ButtonOnEdge = this._ButtonOnEdge.bind(this);
  }

  onKeyDown(ev) {
    if (ev.keyCode === 10000 || ev.keyCode === 27) {
      if (this._NavigateHome) {
        this._NavigateHome();
      }
      return true;
    }
    if (ev.keyCode === 40) {
      this.changeFocus(`${this.props.branchName}/button`);
      return true;
    }

    return false;
  }

  componentDidMount() {
    this.changeFocus(`${this.props.branchName}/textView`);
  }

  _ButtonOnEdge(edge_info) {
    if (edge_info.direction === EdgeDirection.top) {
      this.changeFocus(`${this.props.branchName}/textView`);
    }
  }

  renderContent() {
    return (
            <div>
                <div style={{
                  textAlign: "center",
                  fontSize: "30px",
                  lineHeight: "50px",
                  color: "#ffffff",
                  left: 140,
                  top: 20,
                  width: 1000,
                  height: 50,
                  backgroundColor: "rgba(27,38,151,0.8)"
                }}>{`可展示篇幅超过一屏的文字`}</div>
                <div style={{ left: 140, top: 100 }}>
                    <LongTextScroll branchName={`${this.props.branchName}/textView`} style={{ width: 1000, height: 500, backgroundColor: '#EEEEEE' }} textStyle={{ color: "#000000", fontSize: 20 }} scrollBlockStyle={{ width: 10, height: 30, backgroundColor: "#555555" }} scrollStyle={{ left: 1005, width: 10, height: 500, backgroundColor: "#DDDDDD" }} step={20}>
                        {"重要提示：   \n\
        财付通支付科技有限公司（以下简称“本公司”）依据本协议为用户（以下简称“你”）提供微信支付服务。本协议对你和本公司均具有法律约束力。\n\
    在使用微信支付服务前，你应当阅读并遵守本协议和《财付通服务协议》。由于微信支付服务是本公司依托微信及微信公众平台提供的服务，你在使用本服务时，还需使用微信软件服务，所以你应阅读并遵守《腾讯微信软件许可及服务协议》，若你需要使用微信公众平台服务，你还应阅读并遵守《微信公众平台服务协议》。本公司在此特别提醒你认真阅读并充分理解前述协议各条款，特别是免除或限制本公司的责任、限制你的权利、规定争议解决方式的相关条款。请你审慎阅读并选择是否接受前述协议，如你对本协议有任何疑问，应向客服咨询。\n\
    一、【本服务】\n\
        1.1 微信支付服务，指本公司依托微信及微信公众平台为收付款人之间提供的货币资金转移服务。（下称“本服务”）\n\
        1.2 本服务包括余额支付和快捷支付两种类型。\n\
        1.2.1 余额支付，指你使用本公司给你开立的支付账户中的余额进行资金转移的一种支付方式。你确认并同意本公司给你开立支付账户时，将你的微信号与该支付账户相关联，使得你可以通过微信的“零钱”功能使用该支付账户（以下所称的“零钱”即指该支付账户，也等同于《财付通服务协议》中所指的财付通账户）。你有权使用“零钱”中的余额进行消费和转账，若余额不足，你需先开通快捷支付，并向“零钱”充值，你也可以通过接收他人的转账来增加“零钱”的余额。\n\
        1.2.2 快捷支付，指你委托本公司直接对你的银行账户进行资金扣划和归集操作的一种支付方式。快捷支付可以实现“零钱”的充值，以及消费、转账等功能。若你需要在微信客户端使用快捷支付，你应在微信客户端的“添加银行卡”页面输入你本人的真实姓名、身份证号、银行卡卡号、有效期(信用卡持卡人需填写)、银行预留手机号等信息，待前述信息经本公司和你的开户银行校验通过后，方能使用。你已知悉并同意，因你的银行账户功能、限额、类别等情况发生变化，或银行账户被撤销或合并而无法正常使用本服务的，你需与银行协商解决并及时通知本公司，本公司可提供必要的支持和配合。\n\
        1.3 你理解并同意，本服务的上述流程，可能因适用场景和功能存续情况的变化而发生调整，所以具体以本公司实际提供的服务流程为准。\n\
        1.4 为了满足国家法律法规关于非银行支付机构的运营规定，你授权本公司向国家机关、金融机构、企事业单位查询、核实你的身份信息、账户信息。\n\
        1.5 你理解并同意，本公司有权根据业务运营的调整需要，修订本协议的内容，并提前通过本公司网站或微信客户端公告最新的服务协议，你应关注并了解本公司发布的最新服务协议，最新的服务协议在公告届满30日起生效，若你无法同意最新的服务协议的内容，你有权停止使用本服务。\n\
        1.6 你已知悉，“零钱”所记录的资金余额不同于你本人的银行存款，不受《存款保险条例》保护，其实质为你委托财付通公司保管的、所有权归属于你的预付价值。该预付价值对应的货币资金虽然属于你，但不以你本人名义存放在银行，而是以财付通公司名义存放在银行，并且由财付通公司向银行发起资金调拨指令。\n\
    二、【账户和信息安全】\n\
        2.1 你应自行设置微信号的登录密码和微信支付密码，并予以妥善保管。你的微信号将与本公司给你配置的支付账户关联，不能单独使用，若你的微信号注销，则与其关联的支付账户也随之注销，使得你无法通过该微信号使用本服务。为满足法律法规的要求以及使用本服务的核心功能，你需提交你的姓名、身份证号、手机号、银行卡信息等信息。你授权本公司在法律规定的范围内保存你的姓名、身份证号、手机号、银行卡号、交易订单、交易记录等信息，以供向你持续性地提供和推广优质服务。你同意：\n\
        2.1.1 你应按照本公司要求提供并及时更新你的信息，若你提供的信息错误、不实、过期或不完整，本公司有权暂停或终止向你提供部分或全部服务。\n\
        2.1.2 你应准确提供并及时更新你的联系方式，以便本公司与你进行及时、有效联系；如你未准确提供并及时更新你的联系方式，本公司可能将无法与你取得联系，并无法为你提供部分或全部服务。\n\
        2.1.3 你应及时更新你的身份信息及相关资料，如你未及时更新上述身份信息及相关资料导致本服务无法使用或微信支付账户被他人冒用的，相应风险将由你自行承担。\n\
        2.1.4 若你为个人用户，你确认，本公司有权在出现下列任一情形时要求核对你的有效身份证件或其他必要文件，留存有效身份证件的扫描件，且完成本公司要求的相关身份认证。你应积极配合，否则本公司有权限制或停止向你提供部分或全部本服务：\n\
            A、你办理充值、收取或支付单笔金额人民币1万元以上或者外币等值1000美元以上业务的；\n\
            B、你全部微信支付账户项下30天内充值、收取及支付总金额累计人民币5 万元以上或外币等值1万美元以上的；\n\
            C、你全部微信支付账户余额连续10天超过人民币5000元或外币等值1000美元的；\n\
            D、你使用本服务买卖金融产品或服务的；\n\
            E、本公司认为你的身份信息或相关资料存在疑点，或交易行为、交易情况出现异常的；\n\
            F、本公司认为应核对或留存你身份证件或其他必要文件的其他情形的。\n\
                本条款所称“以上”,包括本数。\n\
        2.1.5 若因国家法律法规、部门规章或监管机构的要求，本公司需要你补充提供任何身份信息或相关资料时，如你不能及时提供，本公司有权暂停或终止向你提供部分或全部本服务。\n\
        2.1.6 你在微信支付账户中设置的姓名或昵称、头像等必须遵守法律法规、公序良俗、社会公德，且不会侵害其他第三方的合法权益，否则本公司有权对你的微信支付账户采取限制措施，包括但不限于屏蔽、撤销你微信支付账户的姓名、昵称、头像，停止提供部分或全部服务。你在使用微信支付时，你的昵称和头像将展示在收付款方的账单、零钱明细、收款小账本等，以便于收付款方知晓交易信息。\n\
        2.1.7 你应充分了解并清楚知晓出租、出借、出售、购买账户的相关法律责任和惩戒措施，承诺依法依规开立和使用本人账户。\n\
        2.2 你应妥善保管下列信息、资料和硬件设备：\n\
            （1）银行卡及其密码、CVV码、有效期等卡片信息；\n\
            （2）微信号及其登录密码；\n\
            （3）微信支付密码、手势密码；\n\
            （4）手机等移动终端及SIM卡信息、二维码（条码）信息；\n\
            （5）指纹信息、虹膜信息、人脸信息、声纹信息等生物识别信息等。\n\
                你应妥善保管上述资料、信息和硬件设备，并确保你的手机等移动终端设备在安全、无病毒、未被入侵、未被监控、未被非法控制的环境下运行和使用。若你泄露了上述信息中的任意一项或遗失了上述硬件设备，由此导致的风险和损失应由你自行承担。\n\
        2.3 发生下列任一情形时，你应及时联系本公司的客服部门，以减少可能发生的损失：\n\
        （1）你不慎遗失或泄露了本协议第2.2条所列信息的；\n\
        （2）你遗失了你的手机等移动终端或SIM卡的；\n\
        （3）你在开设银行账户时预留了他人的手机号码的；\n\
        （4）第三人冒用或盗用你的身份信息或账户信息的；\n\
        （5）其他任何未经你本人合法授权，却在使用你的微信号、本服务或你的银行账户的。\n\
        如发生上述情形，请及时拨打本公司客服电话：95017。\n\
        若你未及时通知本公司，你应自行承担因此遭受的损失，但本公司存在故意或重大过失的除外。\n\
        2.4 本公司有权根据国家法律法规、规章制度、行业规范、监管政策和要求的规定，对你的支付账户的数量、类别、限额、功能进行调整，调整的方式将根据你的支付账户风险管理情况而定，若你已依法申请调整并审核通过的，以审核通过的内容为准。\n\
    三、【本服务的功能】\n\
        3.1 消费\n\
            你可以使用本服务向商户购买商品和服务，本公司将根据你或商户的交易指令，从你的“零钱”或你关联的银行账户扣划相应资金至商户账户。\n\
        3.2 转账/收款\n\
            转账：你可以使用本服务向你指定的收款人转账，本公司将根据你或你指定的收款人的支付指令，从你的“零钱”或你关联的银行账户扣划相应资金至收款人的微信支付账户或银行账户。\n\
            收款：你也可以通过微信支付服务收取他人的转账资金，本公司可将该笔资金转至你的“零钱”。你也可以将零钱余额限度内的资金转移至你关联的银行账户，本公司也可按照法律规定或本协议约定直接将“零钱”余额资金转移至你关联的银行账户。\n\
            实现方式：本公司将通过微信客户端中的“微信红包”、“转账”、“转账到银行卡”“AA收款”、“面对面收钱”实现转账和收款功能。\n\
        3.3 向商户付款\n\
            为方便你使用小额支付服务，你向商户提供你的二维码（条码）信息，商户获取你的二维码（条码）信息后，对于一定额度内的交易（本公司将根据法规、你的自助设置和你的交易风险对额度进行调整），无需输入支付密码或短信校验码即可完成付款。你开通和使用本功能，即视为你同意并授权本公司无需校验你的支付密码、短信校验码等要素，即可将交易资金从你的“零钱”或银行账户转移至商户账户。你在使用该服务时，需遵守 《付款用户服务协议》 的约定。\n\
        3.4 免密支付\n\
            为方便你使用小额支付服务，你在相关页面首次开通本功能时，你输入支付密码并向本公司作出授权确认后，本公司有权直接依据商户的指令从你的“零钱”或银行账户扣划相应资金至商户账户，你再次使用本功能时，在一定额度内，本公司无需再校验你的支付密码、短信校验码等要素，即可将交易资金从你的“零钱”或银行账户转移至商户账户。若你要取消对本公司的扣款授权，你应在扣款指令执行前，在客户端中进行取消操作，否则，本公司有权直接根据商户的扣款指令进行扣款。\n\
        3.5 查询\n\
            本公司将记录你使用本服务的交易情况，你可以在微信客户端查询交易记录。\n\
        3.6 添加/解绑银行卡\n\
            你可以在微信客户端关联新的银行账户、银行卡或解绑银行账户、银行卡。\n\
        3.7 修改/重置密码\n\
            你可以对原有密码进行修改，或通过提供银行卡及个人信息等资料申请密码重置。\n\
        3.8 退款\n\
            若你就微信支付交易申请退款的，退款成功后，本公司可直接将款项退还至你关联的原银行卡或“零钱”中。\n\
        3.9 充值和提现\n\
            充值：你可以将你的关联银行账户中的资金划转至你的“零钱”账户。\n\
            提现：你可以将“零钱”账户中的资金划转至你的关联银行账户。\n\
        3.10 代客购汇功能\n\
            若你通过本服务购买境外商户商品，本公司将根据你的支付指令以你的名义代理购买相应外汇并结算给境外商户。\n\
        3.10.1 你同意并自愿接受在你提交购汇申请时由本公司网站页面提供的外汇牌价，而不论该外汇牌价是否是最新/实时，或是否是对你最有利的外汇汇率。你理解并同意，本公司对上述牌价是否是购买外汇申请时最新或实时的牌价并未/并不提供相关保证或担保。一旦你在本公司支付页面点击确认购买，即代表你同意并授权本公司根据网站页面登载的外汇牌价的汇率、以你的名义代理你向本公司合作银行发送外汇购买指令并确定购买，关于代客购汇的具体条款参见《财付通代理购结汇协议》，如本协议条款与《财付通代理购结汇协议》条款规定不一致或存在冲突，以《财付通代理购结汇协议》效力为准。\n\
        3.10.2 你同意，本公司仅按照你选择的牌价通过本公司合作银行购买指定的外汇，而不对你选择的牌价中标明的汇率与实际购买时执行的汇率之间的汇兑损益负责。\n\
        3.10.3 你知悉并同意，在你授权本公司向本公司合作银行发送外汇购买信息后，即视为你与本公司合作银行直接达成外汇购买协议，有关该外汇购买的相关权利义务由你与本公司合作银行享有并承担。同时，你同意并授权本公司有权将你微信支付账户中与购汇指令等值的人民币资金支付给本公司合作银行。若你发送的购汇指令中所购外汇等值的人民币金额超出你“零钱”余额或你关联的银行卡账户余额的，该购汇指令应被视为异常指令。"}
                </LongTextScroll>
                    <div style={{ left: 400, top: 550 }}>
                        <Button branchName={`${this.props.branchName}/button`} onEdge={this._ButtonOnEdge}/>
                    </div>
                </div>
            </div>
    );
  }
}

const App = createStandaloneApp(MainScene);

export {
  App, // 独立运行时的入口
  MainScene as SubApp, // 作为导航页的子入口时
};
