apply plugin: 'com.android.application'

android {
    compileSdkVersion 28
    defaultConfig {
        minSdkVersion 19
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"
        flavorDimensions "default" // 有Flavor后，必须声明，否则报错
    }

    productFlavors {
        // 在AS环境下，通过Build Variants横向卡片选择flavor
        // 声明了Flavor后，没有默认flavor，当执行./gradlew :XXXX:assembleRelease后，会编译所有Flavor
        // 编译指定flavor的指令: ./gradlew {模块}:assemble{Flavor}{Debug/Release}
        Demo {
            applicationId "com.qcode.jsview.sample_demo"
            manifestPlaceholders = [LABEL_NAME:"视九JSV测试"]
        }

        PublicShow {
            applicationId "com.qcode.jsview.sample_show"
            manifestPlaceholders = [LABEL_NAME:"视九H5引擎"]
        }
    }

    compileOptions {
        targetCompatibility JavaVersion.VERSION_1_8
        sourceCompatibility JavaVersion.VERSION_1_8
    }

    signingConfigs {
        release {
            storeFile file("$rootProject.projectDir/demo_keystore/qcode_export_demo_release.keystore");
            storePassword 'demo@1234';
            keyAlias 'qcode_export_demo_release';
            keyPassword 'demo@1234';
        }
    }

    applicationVariants.all { variant ->
        println("++++++Iterating variant: " + variant.getFlavorName())
        if (variant.getFlavorName() == "PublicShow") {
            buildConfigField "String", "SHOW_MODE", "\"1\""
        } else {
            buildConfigField "String", "SHOW_MODE", "\"0\""
        }
    }

    buildTypes {
        buildTypes.each {
            it.buildConfigField("String", "APP_URL", "\"${CustomConfig_AppUrl}\"")
            it.buildConfigField("String", "JSVIEW_JS_ENGINE_URL", "\"${CustomConfig_EngineUrl}\"")
        }

        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }


    externalNativeBuild {
        cmake {
            path "CMakeLists.txt"
        }
    }

    defaultConfig {
        ndk {
            abiFilters 'armeabi-v7a'
        }
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')

    // 可选：仅为了展示启动图模块(com.qcode.jsview.sample.submodule.StartingImage)，引入Glide模块
    implementation('com.github.bumptech.glide:glide:4.5.0')

    // JsView接口
    implementation("com.qcode.jsview.view-qcast:jsview.view:1.2.513")
    implementation fileTree(include: '*.aar', dir: 'src/aar-libs')

    // 调试JsView引擎内核时使用(OnDebugJsViewEngine)
//    implementation project(path: ':jsview:jsview.core')
//    implementation project(path: ":jsview:jsview.loader-service")
//    implementation project(path: ':jsview:jsview.view')
}


