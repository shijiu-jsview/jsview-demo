System.setProperty('java.awt.headless', 'false')
import groovy.swing.SwingBuilder

ext {
  keystorePath = System.getenv('RELEASE_KEYSTORE_PATH')
  keyAlias = System.getenv('RELEASE_KEY_ALIAS')
  storePassword = System.getenv('RELEASE_STORE_PASSWORD')
  keyPassword = System.getenv('RELEASE_KEY_PASSWORD')
}

gradle.taskGraph.whenReady { taskGraph ->
  taskGraph.getAllTasks().each() { task ->
    if (task.name.endsWith('packageRelease')) {
      updateKeyStoreValues();
    }
  }
}

def updateKeyStoreValues() {
  def storeFile

  def propfile = new File(project.ext.keystoreDirPath + "/keystore.properties")

  if(propfile.exists()) {
    Properties props = new Properties()
    props.load(new FileInputStream(propfile))

    if(keystorePath == null || keystorePath.isEmpty()) {
      keystorePath = "$project.ext.keystoreDirPath/$props.RELEASE_STORE_FILE"
    }
    storeFile = new File(keystorePath)

    if(keyAlias == null || keyAlias.isEmpty()) {
      keyAlias = props.RELEASE_KEY_ALIAS
    }

    if(storePassword == null || storePassword.isEmpty()) {
      storePassword = props.RELEASE_STORE_PASSWORD
    }

    if(keyPassword == null || keyPassword.isEmpty()) {
      keyPassword = props.RELEASE_KEY_PASSWORD
    }
  }

//  if(storePassword == null || storePassword.isEmpty()) {
//    storePassword = promptDev('KeyStore', 'Please enter the keystore password: ').toString();
//  }
//  if(keyPassword == null || keyPassword.isEmpty()) {
//    keyPassword = promptDev('Key', 'Please enter the key password: ').toString()
//  }

  android.signingConfigs.release.storeFile = storeFile
  android.signingConfigs.release.keyAlias = keyAlias
  android.signingConfigs.release.storePassword = storePassword
  android.signingConfigs.release.keyPassword = keyPassword
}

def promptDev(dialogTitle, promptText) {
  def pass = ''
    if (System.console() == null) {
      new SwingBuilder().edt {
        dialog(modal: true,
            title: dialogTitle,
            alwaysOnTop: true,
            resizable: false,
            locationRelativeTo: null,
            pack: true,
            show: true
            ) {
          vbox {
            label(text: promptText)
              input = passwordField()
              button(defaultButton: true, text: 'OK', actionPerformed: {
                  pass = input.password;
                  dispose();
                  })
          }
        }
      }
    } else {
      pass = System.console().readPassword('\n' + promptText)
      pass = new String(pass)
    }

  if (pass.size() <= 0) {
    throw new InvalidUserDataException("You must enter a password to proceed.")
  }

  return pass
}
